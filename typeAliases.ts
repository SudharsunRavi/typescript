//TYPE ALIASES- used to create a list of types that can be used in multiple places

type UserAlias={
    name:string,
    age:number
}

function createUser3():UserAlias{
    let name='Sudharsun';
    let age=19;
    return {name, age}
}
createUser3()  

//or

function createUser4({name:string, age:number}:UserAlias){}
let user2={name: 'Sudharsun', age: 19};
createUser4(user2);

//or

//this need to take input as UserAlias type as well as return it in UserAlias type
function createUser5(user:UserAlias):UserAlias{
    return{
        name: 'Sudharsun', 
        age: 19
    };
}
createUser5({name: 'Sudharsun', age: 19});

//readonly keyword, ? for optional

type adminAliase={
    readonly _id:string,
    name:string,
    age:number,
    email?:string,
    premiumUser:boolean
}

//lets say the ID is auto-generated by the system and is unique for every admin, so we dont want to manipulate it.
//the ? after email makes it optional, so we can either use it or leave it empty

let admin:adminAliase={
    _id: '1234567890',
    name: 'Sudharsun',
    age: 19,
    premiumUser: true
}

admin.email="s@gmail.com"; //allowed
admin.name="Sudharsun Ravisankar"; //allowed
// admin._id="289328392" ---> this will throw an error as _id is readonly

//combining one or more aliases
type cardNumber={
    cardNumber:string
}
type cardDate={
    cardDate: string
}

type cardDetail=cardNumber & cardDate & {cvv:number};

let card:cardDetail={
    cardNumber: '1234567890',
    cardDate: '12/22',
    cvv: 123
}

export{}






